<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="vivagraph.js"></script> 
    <script src="graphClient.js"></script>
    <script type="text/javascript">


      function onload(){
        "use strict";

        let _data = "<%= JSON.stringify(data)%>"
        let data = JSON.parse(_data.replaceAll("&#34;", "\""))

        let graph = Viva.Graph.graph();


        constructGraph(data, graph);        


        var layout = Viva.Graph.Layout.forceDirected(graph, {
           springLength : 100,
           springCoeff : 0.0008,
           dragCoeff : 0.01,
           gravity : -1.2,
           theta : 1
        });


        // we need to compute layout, but we don't want to freeze the browser
        precompute(1500, renderGraph);

        function precompute(iterations, callback) {
          // let's run 10 iterations per event loop cycle:
          var i = 0;
          while (iterations > 0 && i < 10) {
            layout.step();
            iterations--;
            i++;
          }

          if (iterations > 0) {
            setTimeout(function () {
                precompute(iterations, callback);
            }, 0); // keep going in next even cycle
          } else {
            // we are done!
            callback(graph);
          }
        }

	function generateDOMLabels(graoh) {
	  var labels = Object.create(null);
	  graph.forEachNode(function(node) {
	     var label = document.createElement('span');
	     label.classList.add('node-label');
	     label.innerText = node.id;
	     labels[node.id] = label;
	     container.appendChild(label);
	  });
	  // NOTE: If your graph changes over time you will need to
	  // monitor graph changes and update DOM elements accordingly
	  return labels;
	}

        function renderGraph(graph) {
          var graphics = Viva.Graph.View.webglGraphics();
	  
          var renderer = Viva.Graph.View.renderer(graph, {
              layout   : layout,
              graphics   : graphics,
              renderLinks : true,
              prerender  : true
            });

          graphics.node((node)=>{
	    
          }).link((link)=>{

            let to = graph.getNode(link.toId)
            let from = graph.getNode(link.fromId)


          })

          renderer.run();
	  generateDOMLabels(graph)

          // Final bit: most likely graph will take more space than available
          // screen. Let's zoom out to fit it into the view:
          var graphRect = layout.getGraphRect();
          var graphSize = Math.min(graphRect.x2 - graphRect.x1, graphRect.y2 - graphRect.y1);
          var screenSize = Math.min(document.body.clientWidth, document.body.clientHeight);

          var desiredScale = screenSize / graphSize;
          zoomOut(desiredScale, 1);

          function zoomOut(desiredScale, currentScale) {
            // zoom API in vivagraph 0.5.x is silly. There is no way to pass transform
            // directly. Maybe it will be fixed in future, for now this is the best I could do:
            if (desiredScale < currentScale) {
              currentScale = renderer.zoomOut();
              setTimeout(function () {
                  zoomOut(desiredScale, currentScale);
              }, 16);
            }
          }
        }
      }
    </script>
  </head>
    <body class="graph-container" onload="onload()">
    <h1><%= title %></h1>
    <p>Welcome to <%= title %></p>


  </body>
</html>

